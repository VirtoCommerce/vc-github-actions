name: 'GraphQL Tests'
description: 'Runs GraphQL Tests'
inputs:
  vctestingRepo:
    description: 'UI tests repository'
    required: true
    type: string
  vctestingRepoBranch:
    description: 'UI tests repository branch'
    required: true
    type: string
  vctestingPath:
    description: 'UI tests path'
    required: true
    type: string
  baseUrl:
    description: 'Base URL'
    required: true
    type: string
  backUrl:
    description: 'Back URL'
    required: true
    type: string
  adminUsername:
    description: 'Admin Username'
    required: true
    type: string
  adminPassword:
    description: 'Admin Password'
    required: true
    type: string
  adminToken:
    description: 'Admin Token'
    required: true
    type: string
  userEmail:
    description: 'User Email'
    required: true
    type: string
  frontAdmin:
    description: 'Front Admin'
    required: true
    type: string
  password:
    description: 'Password'
    required: true
    type: string
  apiKey:
    description: 'API Key'
    required: false
    type: string
  storeId:
    description: 'Store ID'
    required: true
    type: string
  playwrightHeadless:
    description: 'Playwright Headless'
    required: true
    type: string
  browser:
    description: 'Browser'
    required: true
    type: string
  testSecretEnvFile:
    description: 'Test secret environment file content'
    required: true
    type: string
runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Check backend and frontend are running
      shell: pwsh
      run: |
        echo "Checking if backend (${{ inputs.backUrl }}) and frontend (${{ inputs.baseUrl }}) are running..."
        try {
          $backendResponse = Invoke-WebRequest -Uri "${{ inputs.backUrl }}" -Method GET -TimeoutSec 10
          Write-Host "Backend is running (Status: $($backendResponse.StatusCode))"
        } catch {
          Write-Warning "Backend health check failed: $($_.Exception.Message)"
        }
        
        try {
          $frontendResponse = Invoke-WebRequest -Uri "${{ inputs.baseUrl }}" -Method GET -TimeoutSec 10
          Write-Host "Frontend is running (Status: $($frontendResponse.StatusCode))"
        } catch {
          Write-Warning "Frontend health check failed: $($_.Exception.Message)"
        }

    - name: Getting tests
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.vctestingRepo }}
        ref: ${{ inputs.vctestingRepoBranch }}
        path: ${{ inputs.vctestingPath }}

    - name: Create .env file
      shell: bash
      env:
        SECRET_ENV_FILE: ${{ inputs.testSecretEnvFile }}
      run: |
        echo "Creating .env file..."
        cd ${{ inputs.vctestingPath }}
        echo "$SECRET_ENV_FILE" > .env
        chmod 600 .env
        echo "..Done."

    - name: Update .env file with local backend URL
      shell: bash
      run: |
        echo "Updating .env file to use local backend URL..."
        cd ${{ inputs.vctestingPath }}
        
        # Replace any BACKEND_BASE_URL value with localhost URL
        sed -i 's|^BACKEND_BASE_URL=.*|BACKEND_BASE_URL=http://localhost:8090|g' .env
        # Replace any FRONTEND_BASE_URL value with localhost URL
        sed -i 's|^FRONTEND_BASE_URL=.*|FRONTEND_BASE_URL=http://localhost|g' .env
        
        echo "Updated .env content:"
        cat .env
        echo "..Done."

    - name: Upload .env file for debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: .env-file-for-debugging
        path: |
          ${{ inputs.vctestingPath }}/.env
        retention-days: 3
        include-hidden-files: true

    - name: Install dependencies
      shell: bash
      run: |
        cd ${{ inputs.vctestingPath }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-html

    - name: Seed test data
      shell: pwsh
      run: |
        cd ${{ inputs.vctestingPath }}
        echo "ls -la ./"
        ls -la ./
        $envFile = get-content -path ./.env

        if ( $envFile -match 'TEST_CUSTOMER_PASSWORD=\S+' ) {
          $m = $envFile -match 'TEST_CUSTOMER_PASSWORD=\S+'
          echo "matches: $m"
          $env:ADMIN_PASSWORD = $m[0].split('=')[1]
          $env:USERS_PASSWORD = $m[0].split('=')[1]
          Write-Host "`e[32mSet password for admin user from env file"
        }
        else {
          $env:ADMIN_PASSWORD = 'store'
          Write-Host "`e[32mSet password for admin user from default value"
        }

        $env:ADMIN_USERNAME = 'admin'
        $env:STORE_ID = 'store-acme'

        python -m scripts.dataset_seeder
            
    - name: Install Playwright Browsers
      shell: bash
      run: |
        cd ${{ inputs.vctestingPath }}
        playwright install --with-deps ${{ inputs.browser }}
            
    - name: Run GraphQL Tests
      shell: bash
      env:
        FRONTEND_BASE_URL: ${{ inputs.baseUrl }}
        BACKEND_BASE_URL: ${{ inputs.backUrl }}
        ADMIN_USERNAME: ${{ env.ADMIN_USERNAME }} #${{ inputs.adminUsername }}
        ADMIN_PASSWORD: ${{ env.ADMIN_PASSWORD }} #${{ inputs.adminPassword }}
        ADMIN_TOKEN: ${{ inputs.adminToken }}
        USER_EMAIL: ${{ inputs.userEmail }}
        FRONT_ADMIN: ${{ inputs.frontAdmin }}
        PASSWORD: ${{ inputs.password }}
        API_KEY: ${{ inputs.apiKey }}
        STORE_ID: ${{ env.STORE_ID }} #${{ inputs.storeId }}
        PLAYWRIGHT_HEADLESS: ${{ inputs.playwrightHeadless }}
      run: |
        echo "Running GraphQL tests against ${{ inputs.baseUrl }}"
        cd ${{ inputs.vctestingPath }}
        pytest tests_graphql/tests/ --browser ${{ inputs.browser }} --html=graphql-report.html --self-contained-html --tracing=retain-on-failure #-v -s

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: graphql-test-results-${{ inputs.browser }}
        path: |
          ${{ inputs.vctestingPath }}/graphql-report.html
          ${{ inputs.vctestingPath }}/playwright-report/
          ${{ inputs.vctestingPath }}/test-results/
        retention-days: 30
