name: 'Update docs.virtocommerce.org (Versioned)'
description: 'Makes and updates versioned documentation for docs.virtocommerce.org using Mike'
outputs:
  docker-image-tag:
    description: "Docker image tag that was used for the build"
    value: ${{ steps.docker-tag.outputs.tag }}
inputs:
  githubToken:
    description: "GitHub token with push permissions to gh-pages branch"
    required: true
  version:
    description: "Documentation version to deploy for ALL subsites (e.g., 3.2025-S13, 1.0). Leave empty to use individual versions."
    required: false
  setAsLatest:
    description: "Set this version as 'latest' alias"
    required: false
    default: 'true'
  setAsDefault:
    description: "Set this version as default version"
    required: false
    default: 'false'
  # Individual subsite versions (optional, override global version)
  marketplaceDeveloperGuideVersion:
    description: "Version for marketplace/developer-guide (overrides global version)"
    required: false
  marketplaceUserGuideVersion:
    description: "Version for marketplace/user-guide (overrides global version)"
    required: false
  platformDeveloperGuideVersion:
    description: "Version for platform/developer-guide (overrides global version)"
    required: false
  platformUserGuideVersion:
    description: "Version for platform/user-guide (overrides global version)"
    required: false
  platformDeploymentOnCloudVersion:
    description: "Version for platform/deployment-on-cloud (overrides global version)"
    required: false
  storefrontDeveloperGuideVersion:
    description: "Version for storefront/developer-guide (overrides global version)"
    required: false
  storefrontUserGuideVersion:
    description: "Version for storefront/user-guide (overrides global version)"
    required: false
  azureSubscriptionId:
    description: "Azure Subscription ID"
    required: true
  azureResourceGroupName:
    description: "Azure Resource Group Name"
    required: true
  azureWebAppName:
    description: "Azure WebApp Name"
    required: true
  azureTenantId:
    description: "Azure Tenant ID"
    required: true
  azureApiKey:
    description: "Azure API Key"
    required: true
  azureAppId:
    description: "Azure App ID"
    required: true
  dockerRegistry:
    description: "Docker Registry"
    required: true
  dockerUsr:
    description: "Docker User"
    required: true
  dockerPwd:
    description: "Docker Password"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout vc-docs repository
      uses: actions/checkout@v3
      with:
        repository: VirtoCommerce/vc-docs
        ref: feat/structure_redesign
        path: vc-docs
        fetch-depth: 0  # Need full history for gh-pages branch
        token: ${{ inputs.githubToken }}
        persist-credentials: true

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install MkDocs and Mike
      shell: bash
      run: |
        pip install mkdocs-material mike
        pip install mkdocs-awesome-pages-plugin mkdocs-git-revision-date-localized-plugin
        pip install mkdocs-minify-plugin mkdocs-redirects mkdocs-monorepo-plugin
        pip install mkdocs-include-markdown-plugin pymdown-extensions jinja2

    - name: Configure Git
      shell: bash
      working-directory: ${{ github.workspace }}/vc-docs
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Build and deploy versioned documentation
      shell: bash
      working-directory: ${{ github.workspace }}/vc-docs
      run: |
        echo "Deploying versioned documentation using Python script..."
        echo "Global version: ${{ inputs.version || 'not set' }}"
        echo "Set as latest: ${{ inputs.setAsLatest }}"
        echo "Set as default: ${{ inputs.setAsDefault }}"
        echo ""
        
        # Build command arguments
        PYTHON_ARGS=("python3" "versioned-build-cicd.py")
        
        # Add global version if provided
        if [ -n "${{ inputs.version }}" ]; then
          PYTHON_ARGS+=("--version" "${{ inputs.version }}")
        fi
        
        # Add individual subsite versions
        if [ -n "${{ inputs.marketplaceDeveloperGuideVersion }}" ]; then
          PYTHON_ARGS+=("--marketplace-developer-guide-version" "${{ inputs.marketplaceDeveloperGuideVersion }}")
        fi
        if [ -n "${{ inputs.marketplaceUserGuideVersion }}" ]; then
          PYTHON_ARGS+=("--marketplace-user-guide-version" "${{ inputs.marketplaceUserGuideVersion }}")
        fi
        if [ -n "${{ inputs.platformDeveloperGuideVersion }}" ]; then
          PYTHON_ARGS+=("--platform-developer-guide-version" "${{ inputs.platformDeveloperGuideVersion }}")
        fi
        if [ -n "${{ inputs.platformUserGuideVersion }}" ]; then
          PYTHON_ARGS+=("--platform-user-guide-version" "${{ inputs.platformUserGuideVersion }}")
        fi
        if [ -n "${{ inputs.platformDeploymentOnCloudVersion }}" ]; then
          PYTHON_ARGS+=("--platform-deployment-on-cloud-version" "${{ inputs.platformDeploymentOnCloudVersion }}")
        fi
        if [ -n "${{ inputs.storefrontDeveloperGuideVersion }}" ]; then
          PYTHON_ARGS+=("--storefront-developer-guide-version" "${{ inputs.storefrontDeveloperGuideVersion }}")
        fi
        if [ -n "${{ inputs.storefrontUserGuideVersion }}" ]; then
          PYTHON_ARGS+=("--storefront-user-guide-version" "${{ inputs.storefrontUserGuideVersion }}")
        fi
        
        # Add flags
        if [ "${{ inputs.setAsLatest }}" == "true" ]; then
          PYTHON_ARGS+=("--set-as-latest")
        fi
        if [ "${{ inputs.setAsDefault }}" == "true" ]; then
          PYTHON_ARGS+=("--set-as-default")
        fi
        
        # Execute Python script
        "${PYTHON_ARGS[@]}"
        
        echo "✓ Deployment completed using Python script!"

    - name: Verify build output
      shell: bash
      working-directory: ${{ github.workspace }}/vc-docs
      run: |
        echo "Verifying build output..."
        
        # Check if site directory exists and has content
        if [ -d "site" ]; then
          echo "✓ Site directory created"
          echo "Site contents:"
          ls -la site/
        else
          echo "❌ Site directory not found"
          exit 1
        fi
        
        # Check if build-info.json exists
        if [ -f "build-info.json" ]; then
          echo "✓ Build info file created"
          cat build-info.json
        else
          echo "⚠️  Build info file not found"
        fi

    - name: Prepare Docker context
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        # Copy versioned site directory for Docker
        cp -r vc-docs/site ./
        
        # Copy Docker files
        cp -r ${{ github.action_path }}/docker/* ./
        
        echo "✓ Docker context prepared"

    - name: Determine Docker Image Tag
      id: docker-tag
      shell: bash
      run: |
        # Use global version if available, otherwise use run number
        if [ -n "${{ inputs.version }}" ]; then
          TAG="versioned-${{ inputs.version }}"
        else
          TAG="versioned-${{ github.run_number }}"
        fi
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Docker image tag: $TAG"

    - name: Build and Push Docker image
      shell: pwsh
      working-directory: ${{ github.workspace }}
      run: |
        dotnet tool install --global VirtoCommerce.GlobalTool
        vc-build BuildAndPush `
          -DockerUsername ${{ inputs.dockerUsr }} `
          -DockerPassword ${{ inputs.dockerPwd }} `
          -DockerfilePath ./Dockerfile `
          -DockerImageName ${{ inputs.dockerRegistry }}/vcpt/docs `
          -DockerImageTag ${{ steps.docker-tag.outputs.tag }} `
          -DockerRegistryUrl ${{ inputs.dockerRegistry }}

