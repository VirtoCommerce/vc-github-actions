name: 'Update docs.virtocommerce.org'
description: 'Makes and updates documentation for docs.virtocommerce.org'
inputs:
  azureSubscriptionId:
    description: "Azure Subscription ID"
    required: true
  azureResourceGroupName:
    description: "Azure Resource Group Name"
    required: true
  azureWebAppName:
    description: "Azure WebApp Name"
    required: true
  azureTenantId:
    description: ""
    required: true
  azureApiKey:
    description: ""
    required: true
  azureAppId:
    description: ""
    required: true
  dockerRegistry:
    description: "Docker Registry"
    required: true
  dockerUsr:
    description: "Docker User"
    required: true
  dockerPwd:
    description: "Docker Passsword"
    required: true
  version:
    description: "Documentation version to deploy (auto=read from file)"
    required: false
    default: 'auto'
  alias:
    description: "Version alias (auto=read from file, or specify like latest, stable)"
    required: false
    default: 'auto'
  deployMode:
    description: "Deployment mode: versioned or legacy"
    required: false
    default: 'versioned'

runs:
  using: "composite"
  steps:
    - name: Build docs
      shell: bash
      working-directory: ${{ github.workspace }}
      env:
        GIT_COMMITTER_NAME: "GitHub Actions"
        GIT_COMMITTER_EMAIL: "actions@github.com"
        DOCS_REPO: "https://github.com/VirtoCommerce/vc-docs"
        DOCS_BRANCH: "feature/structure_redesign"
      run: |
        # Make script executable
        chmod +x ${{ github.action_path }}/scripts/build-versioned-docs.sh
        
        # Determine deployment parameters
        deployMode="${{ inputs.deployMode }}"
        inputVersion="${{ inputs.version }}"
        inputAlias="${{ inputs.alias }}"
        
        echo "Deployment Mode: $deployMode"
        echo "Input Version: $inputVersion"
        echo "Input Alias: $inputAlias"
        
        if [ "$deployMode" = "versioned" ]; then
            # Use versioned deployment with Mike
            # Parameters: version, alias, push_to_remote
            ${{ github.action_path }}/scripts/build-versioned-docs.sh "$inputVersion" "$inputAlias" "false"
        else
            # Use legacy build method
            git clone "$DOCS_REPO" --branch "$DOCS_BRANCH" vc-docs
            cd vc-docs
            pwsh ./build.ps1
        fi

    - name: Docker
      shell: pwsh
      working-directory: ${{ github.workspace }}
      run: |
        dotnet tool install --global VirtoCommerce.GlobalTool
        Copy-Item -Path ${{ github.action_path }}/docker/* -Destination ./ -Recurse -Force
        
        # Choose appropriate nginx config based on deployment mode
        $deployMode = "${{ inputs.deployMode }}"
        if ($deployMode -eq "versioned") {
            Copy-Item -Path ./nginx.versioned.conf -Destination ./nginx.default.conf -Force
            Write-Host "Using versioned nginx configuration"
        } else {
            # Keep existing nginx.default.conf for legacy mode
            Write-Host "Using legacy nginx configuration"
        }
        
        vc-build BuildAndPush -DockerUsername ${{ inputs.dockerUsr }} -DockerPassword ${{ inputs.dockerPwd }} -DockerfilePath ./Dockerfile -DockerImageName ${{ inputs.dockerRegistry }}/vcpt/docs -DockerImageTag $env:GITHUB_RUN_NUMBER -DockerRegistryUrl ${{ inputs.dockerRegistry }}
        
#     - name: Upload docs
#       shell: pwsh
#       env: 
#         AzureSubscriptionIDProd: ${{ inputs.azureSubscriptionId }}
#         AzureResourceGroupNameProd: ${{ inputs.azureResourceGroupName }}
#         AzureWebAppNameProd: ${{ inputs.azureWebAppName }}
#         ArtifactPath: ${{ github.workspace }}/site.zip
#         AzureAPIKey: ${{ inputs.azureApiKey }}
#         AzureTenantID: ${{ inputs.azureTenantId }}
#         AzureAppID: ${{ inputs.azureAppId }}
#       run: |
#         pwsh -file ${{ github.action_path }}/scripts/DocsUpdate.ps1
