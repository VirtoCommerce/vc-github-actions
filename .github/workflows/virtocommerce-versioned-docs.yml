name: "virtocommerce.com docs versioned"
on:
  workflow_dispatch:
    inputs:
      version:
        description: "[all-same mode] Version to deploy to ALL subsites (e.g., 1.0, 3.2025-S13)"
        required: false
        type: string
        default: "1.0"
      marketplaceDeveloperGuideVersion:
        description: "[individual mode] marketplace/developer-guide version"
        required: false
        type: string
      marketplaceUserGuideVersion:
        description: "[individual mode] marketplace/user-guide version"
        required: false
        type: string
      platformDeveloperGuideVersion:
        description: "[individual mode] platform/developer-guide version"
        required: false
        type: string
      platformUserGuideVersion:
        description: "[individual mode] platform/user-guide version"
        required: false
        type: string
      platformDeploymentOnCloudVersion:
        description: "[individual mode] platform/deployment-on-cloud version"
        required: false
        type: string
      storefrontDeveloperGuideVersion:
        description: "[individual mode] storefront/developer-guide version"
        required: false
        type: string
      storefrontUserGuideVersion:
        description: "[individual mode] storefront/user-guide version"
        required: false
        type: string
      setAsLatest:
        description: "Set as latest version"
        required: false
        default: true
        type: boolean
      setAsDefault:
        description: "Set as default version"
        required: false
        default: true
        type: boolean
  schedule:
    - cron: "30 19 * * *"

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          # Number of commits to fetch. 0 indicates all history.
          # Default: 1
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9.x"

      - name: Install Dependencies
        run: |
          pip install mkdocs
          pip install mkdocs-awesome-pages-plugin mkdocs-git-revision-date-localized-plugin mkdocs-material==9.5.4 mkdocs-minify-plugin mkdocs-redirects pymdown-extensions jinja2 mkdocs-git-revision-date-localized-plugin==0.5 mkdocs-include-markdown-plugin mkdocs-glightbox mkdocs-monorepo-plugin mike

      - name: Setup Git Credentials
        uses: VirtoCommerce/vc-github-actions/setup-git-credentials-github@master
        with:
          githubToken: ${{ secrets.REPO_TOKEN }}

      - name: Update docs
        id: update-docs
        uses: VirtoCommerce/vc-github-actions/update-virtocommerce-docs-versioned@master
        with:
          githubToken: ${{ secrets.REPO_TOKEN }}
          version: ${{ github.event.inputs.version }}
          marketplaceDeveloperGuideVersion: ${{ github.event.inputs.marketplaceDeveloperGuideVersion }}
          marketplaceUserGuideVersion: ${{ github.event.inputs.marketplaceUserGuideVersion }}
          platformDeveloperGuideVersion: ${{ github.event.inputs.platformDeveloperGuideVersion }}
          platformUserGuideVersion: ${{ github.event.inputs.platformUserGuideVersion }}
          platformDeploymentOnCloudVersion: ${{ github.event.inputs.platformDeploymentOnCloudVersion }}
          storefrontDeveloperGuideVersion: ${{ github.event.inputs.storefrontDeveloperGuideVersion }}
          storefrontUserGuideVersion: ${{ github.event.inputs.storefrontUserGuideVersion }}
          setAsLatest: ${{ github.event.inputs.setAsLatest }}
          setAsDefault: ${{ github.event.inputs.setAsDefault }}
          azureSubscriptionId: ${{ secrets.AZURESUBSCRIPTIONID }}
          azureResourceGroupName: ${{ secrets.AZURERESOURCEGROUPNAME }}
          azureWebAppName: ${{ secrets.AZUREWEBAPPNAME }}
          azureApiKey: ${{ secrets.AZUREAPIKEY }}
          azureTenantId: ${{ secrets.AZURETENANTID }}
          azureAppId: ${{ secrets.AZUREAPPID }}
          dockerRegistry: ${{ secrets.MAIN_DOCKER_REGISTRY }}
          dockerUsr: ${{ secrets.VCPT_DOCKER_USER }}
          dockerPwd: ${{ secrets.VCPT_DOCKER_PASSWORD }}

      - name: Deploy
        timeout-minutes: 15
        run: |
          dotnet tool update --global VirtoCommerce.GlobalTool
          
          echo "Setting new image tag: ${{ steps.update-docs.outputs.docker-image-tag }}"
          vc-build CloudEnvSetParameter -CloudUrl https://portal.virtocommerce.cloud -CloudToken ${{ secrets.VCPT_CLOUD_TOKEN }} -EnvironmentName vcpt-license -HelmParameters custom.app1.image.tag=${{ steps.update-docs.outputs.docker-image-tag }}
          
          echo "Waiting 10 seconds for ArgoCD to detect changes..."
          sleep 10
          
          echo "Checking deployment status..."
          MAX_ATTEMPTS=20
          ATTEMPT=1
          DEPLOYMENT_STARTED=false
          
          # Try to detect if deployment started (status changed to Progressing)
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking if deployment is in progress..."
            if vc-build CloudEnvStatus -CloudUrl https://portal.virtocommerce.cloud -CloudToken ${{ secrets.VCPT_CLOUD_TOKEN }} -EnvironmentName vcpt-license -HealthStatus Progressing 2>/dev/null; then
              echo "✓ Deployment started (Progressing status detected)"
              DEPLOYMENT_STARTED=true
              break
            fi
            
            # Check if environment is already in desired state (Healthy + Synced)
            if vc-build CloudEnvStatus -CloudUrl https://portal.virtocommerce.cloud -CloudToken ${{ secrets.VCPT_CLOUD_TOKEN }} -EnvironmentName vcpt-license -HealthStatus Healthy -SyncStatus Synced 2>/dev/null; then
              echo "✓ Environment is already Healthy and Synced - deployment may have completed quickly or no changes were needed"
              DEPLOYMENT_STARTED=false
              break
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            sleep 5
          done
          
          if [ "$DEPLOYMENT_STARTED" = true ]; then
            echo "Waiting for deployment to complete..."
            vc-build CloudEnvStatus -CloudUrl https://portal.virtocommerce.cloud -CloudToken ${{ secrets.VCPT_CLOUD_TOKEN }} -EnvironmentName vcpt-license -HealthStatus Healthy -SyncStatus Synced
          else
            echo "Verifying final status..."
            vc-build CloudEnvStatus -CloudUrl https://portal.virtocommerce.cloud -CloudToken ${{ secrets.VCPT_CLOUD_TOKEN }} -EnvironmentName vcpt-license -HealthStatus Healthy -SyncStatus Synced
          fi
          
          echo "✓ Deployment completed successfully!"
