name: 'Docker Environment'
description: 'Runs Docker Environment'
inputs:
  githubUser:
    description: 'User for github packages'
    required: true
  githubToken:
    description: 'Token for github packages'
    required: true
  dockerTag:
    description: 'Docker tag'
    required: false
  platformDockerTag:
    description: 'Platform Docker Tag'
    required: false
    default: 'dev-linux-latest'
  storefrontDockerTag:
    description: 'Storefront Docker Tag'
    required: false
    default: 'dev-linux-latest'
  platformImage:
    description: 'Platform Docker Image'
    required: false
  storefrontImage:
    description: 'Storefront Docker Image'
    required: false
  validateSwagger:
    description: 'Enable or disable swagger validation'
    required: false
    default: 'true'
  installModule:
    description: 'Boolean param. true - to install'
    required: false
    default: ''
  moduleId:
    description: 'Module id'
    required: false
  installModules:
    description: 'Enable or disable "Install Modules" step'
    required: false
    default: 'true'
  installSampleData:
    description: 'Enable or disable "Install Sample Data" step'
    required: true
    default: 'true'

runs:
  using: "composite"
  steps:

    - name: Install VirtoCommerce.GlobalTool
      shell: pwsh
      run: dotnet tool install --global VirtoCommerce.GlobalTool --version 2.0.0-alpha.36

    - name: Install Modules
      working-directory: ${{ github.action_path }}
      shell: pwsh
      run: |
        if("${{ inputs.installModules }}" -eq "true")
        {

          Write-Host "`e[33mInstall Modules step started."
          New-Item -Path "./" -Name "modules" -ItemType "directory"
          Push-Location ./modules
          vc-build install -skip InstallPlatform
          Pop-Location

          Write-Host "`e[32mModules installed."
        }

    - name: Start containers
      env:
        PLATFORM_IMAGE: ${{ inputs.platformImage }}
        STOREFRONT_IMAGE: ${{ inputs.storefrontImage }}
        PLATFORM_DOCKER_TAG: ${{ inputs.platformDockerTag }}
        STOREFRONT_DOCKER_TAG: ${{ inputs.storefrontDockerTag }}
      shell: pwsh
      working-directory: ${{ github.action_path }}
      run: |
        Write-Host "`e[33mStart Containers step started."
        $platformContainer = "virtocommerce_vc-platform-web_1"
        . "./scripts/inspect-docker-status.ps1"


        docker-compose --project-name virtocommerce up -d

        InspectContainerStatus -ContainerId $platformContainer
        
        Write-Host "`e[32mContainers started."

    - name: Check Installed Modules
      working-directory: ${{ github.action_path }}
      shell: pwsh
      run: |
        if("${{ inputs.installModules }}" -eq "true")
        {

          Write-Host "`e[33mCheck Installed Modules step started."
          $platformContainer = "virtocommerce_vc-platform-web_1"
          scripts/check-installed-modules.ps1 -ApiUrl http://localhost:8090 -ContainerId $platformContainer
          Write-Host "`e[32mInstalled Modules checked."
        }

    - name: Install Sample Data
      working-directory: ${{ github.action_path }}
      shell: pwsh
      run: |
        if("${{ inputs.installSampleData }}" -ne "true")
        {
          exit 0
        }

        Write-Host "`e[33mInstall Sample Data step started."
        scripts/setup-sampledata.ps1 -ApiUrl http://localhost:8090 -Verbose -Debug
        Write-Host "`e[32mSample Data installed."



    - name: Swagger Schema Validation
      shell: pwsh
      run: |
        if("${{ inputs.validateSwagger }}" -ne "true")
        {
          exit 0
        }
        Write-Host "`e[33mSwagger Schema Validation step started."
        . "./scripts/watch-url-up.ps1"
        $platformIsUp = (Watch-Url-Up -ApiUrl $ApiUrl -TimeoutMinutes 15 -RetrySeconds 15 -WaitSeconds 15)
        if ($platformIsUp) {
          docker pull swaggerapi/swagger-validator-v2
          docker run -d -p 85:8080 swaggerapi/swagger-validator-v2
          Write-Host "`e[33mWait before swagger-validator-v2 start for for seconds."
          Start-Sleep -Seconds 30
          ${{ github.action_path }}/scripts/get-swagger.ps1 -ApiUrl http://localhost:8090 -OutFile ${{ github.action_path }}/swaggerSchema.json -Verbose -Debug
          Get-ChildItem
          Get-ChildItem ${{ github.action_path }}
          Get-Content -Path ${{ github.action_path }}/swaggerSchema.json -TotalCount 10
          vc-build ValidateSwaggerSchema -SwaggerSchemaPath ${{ github.action_path }}/swaggerSchema.json -SwaggerValidatorUri http://localhost:85/validator/debug
        }
        Write-Host "`e[32mSwagger Schema validated."
