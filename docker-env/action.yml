name: 'Docker Environment'
description: 'Runs Docker Environment'
inputs:
  githubUser:
    description: 'User for github packages'
    required: true
  githubToken:
    description: 'Token for github packages'
    required: true
  dockerTag:
    description: 'Docker tag'
    required: false
  platformDockerTag:
    description: 'Platform Docker Tag'
    required: false
    default: 'local-latest'
  platformImage:
    description: 'Platform Docker Image'
    required: false
  validateSwagger:
    description: 'Enable or disable swagger validation'
    required: false
    default: 'true'
  installCustomModule:
    description: 'Enable or disable custom module ver. installation'
    required: false
    default: 'false'
  customModuleId:
    description: 'Custom Module id'
    required: false
    default: ''
  customModuleUrl:
    description: 'Custom module Module url'
    required: false
    default: ''
  installModules:
    description: 'Enable or disable "Install Modules" step'
    required: false
    default: 'true'
  installSampleData:
    description: 'Enable or disable "Install Sample Data" step'
    required: true
    default: 'true'
  envDir:
    description: 'Directory with environment files'
    required: true
    default: '.'


runs:
  using: "composite"
  steps:

    - name: Install Commerce Bundle Modules
      if: ${{ inputs.installModules  == 'true' }}
      working-directory: ${{ github.action_path }}
      env: 
        INSTALL_FOLDER: 'modules'
      shell: pwsh
      run: |
        Write-Host "`e[33mInstall Modules step started."
        New-Item -Path "./" -Name "${{ env.INSTALL_FOLDER}}" -ItemType "directory"
        Push-Location ./${{ env.INSTALL_FOLDER}}
        vc-build install -Edge -skip InstallPlatform

    - name: Install Custom Module
      if: ${{ inputs.installCustomModule == 'true' }}
      working-directory: ${{ github.action_path }}
      shell: pwsh
      run: |
        ./scripts/compose-package_json-for-custom-module.ps1 -customModuleId ${{ inputs.customModuleId }} -customModuleUrl ${{ inputs.customModuleUrl }}

        $dockerFiles = "https://raw.githubusercontent.com/VirtoCommerce/vc-docker/feat/net8/linux/platform/Dockerfile;https://raw.githubusercontent.com/VirtoCommerce/vc-docker/master/linux/platform/wait-for-it.sh"
        Write-Host "`e[32mDownload Dockerfile and build image"
        $dockerFilesArray = $dockerFiles.Split(';')
        foreach($file in $dockerFilesArray){
            try {
                $fileName = Split-Path $file -Leaf
                Invoke-WebRequest -Uri $file -OutFile $fileName -UseBasicParsing -OperationTimeoutSeconds 15 -RetryIntervalSec 1 -MaximumRetryCount 3
                Write-Host "Downloaded '$fileName' successfully"
            }
            catch {
                Write-Error "Failed to download $file. Error: $_"
                exit 1
            }
        }
        docker build ./ --build-arg SOURCE=. --tag "${{ inputs.platformImage }}:${{ inputs.platformDockerTag }}"

    - name:  .env files
      env:
        ENV_DIR: ${{ inputs.envDir }}
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo -e '\033[33m.env files started.'
        mkdir -p ${{ inputs.envDir }}/.docker
        touch ${{ inputs.envDir }}/.docker/platform.env
        echo -e 'Platform environment variables:'
        cat ${{ inputs.envDir }}/.docker/platform.env

    - name: Start containers
      env:
        PLATFORM_IMAGE: ${{ inputs.platformImage }}
        PLATFORM_DOCKER_TAG: ${{ inputs.platformDockerTag }}
        ENV_DIR: ${{ inputs.envDir }}
      shell: pwsh
      working-directory: ${{ github.action_path }}
      run: |
        Write-Host "`e[33mStart Containers step started."
        $platformContainer = "virtocommerce-vc-platform-web-1"
        . ./scripts/inspect-docker-status.ps1 -ContainerId $platformContainer
        # for the case of install modules
        echo "inputs.installModules is ${{ inputs.installModules }}"
        if ( '${{ inputs.installModules }}' -eq 'true' ){
          Write-host "Start modify docker-compose.yml"
          Install-Module -Name powershell-yaml -Force -allowClobber
          $parsedYaml = Get-Content -Path ./docker-compose.yml -Raw | ConvertFrom-Yaml 
          $parsedYaml.services.'vc-platform-web'.volumes.Add('./modules/modules:/opt/virtocommerce/platform/modules')
          $parsedYaml.services.'vc-platform-web'.volumes.Add('./modules/app_data:/opt/virtocommerce/platform/app_data')
          $parsedYaml | ConvertTo-Yaml | Set-Content ./docker-compose.yml
        }
        docker compose --project-name virtocommerce up -d
        InspectContainerStatus -ContainerId $platformContainer -TimeoutMinutes 5 -RetrySeconds 15 -WaitSeconds 0
        Write-Host "`e[32mContainers started."
        
    - name: Check Installed Modules
      if: ${{ inputs.installModules == 'true' || inputs.installCustomModule == 'true' }}
      working-directory: ${{ github.action_path }}
      shell: pwsh
      run: |
        Write-Host "`e[33mCheck Installed Modules step started."
        $platformContainer = "virtocommerce-vc-platform-web-1"
        scripts/check-installed-modules.ps1 -ApiUrl http://localhost:8090 -ContainerId $platformContainer
        Write-Host "`e[32mInstalled Modules checked."

    - name: Install Sample Data
      if: ${{ inputs.installSampleData == 'true' }}
      working-directory: ${{ github.action_path }}
      shell: pwsh
      run: |
        Write-Host "`e[33mInstall Sample Data step started."
        scripts/setup-sampledata.ps1 -ApiUrl http://localhost:8090 -Verbose -Debug

    - name: Swagger Schema Validation
      if: ${{ inputs.validateSwagger == 'true' }}
      shell: pwsh
      run: |
        $waitForSwaggerSec = 30
        Write-Host "`e[33mSwagger Schema Validation step started."
        $platformContainer = "virtocommerce-vc-platform-web-1"
        . "${{ github.action_path }}/scripts/watch-url-up.ps1"
        $platformIsUp = (Watch-Url-Up -ApiUrl http://localhost:8090 -TimeoutMinutes 15 -RetrySeconds 15 -WaitSeconds 0 -ContainerId $platformContainer)
        if ($platformIsUp) {
          docker pull swaggerapi/swagger-validator-v2
          docker run -d -p 85:8080 swaggerapi/swagger-validator-v2
          Write-Host "`e[33mWait before swagger-validator-v2 start for $waitForSwaggerSec seconds."
          Start-Sleep -Seconds $waitForSwaggerSec
          ${{ github.action_path }}/scripts/get-swagger.ps1 -ApiUrl http://localhost:8090 -OutFile ${{ github.action_path }}/swaggerSchema.json -Verbose -Debug
          Get-ChildItem
          Get-ChildItem ${{ github.action_path }}
          Get-Content -Path ${{ github.action_path }}/swaggerSchema.json -TotalCount 10
          vc-build ValidateSwaggerSchema -SwaggerSchemaPath ${{ github.action_path }}/swaggerSchema.json -SwaggerValidatorUri http://localhost:85/validator/debug
        }
        Write-Host "`e[32mSwagger Schema validated."
