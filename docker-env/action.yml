name: 'Docker Environment'
description: 'Runs Docker Environment'
inputs:
  githubUser:
    description: 'User for github packages'
    required: true
  githubToken:
    description: 'Token for github packages'
    required: true
  dockerTag:
    description: 'Docker tag'
    required: false
  platformDockerTag:
    description: 'Platform Docker Tag'
    required: false
    default: 'dev-linux-latest'
  storefrontDockerTag:
    description: 'Storefront Docker Tag'
    required: false
    default: 'dev-linux-latest'
  platformImage:
    description: 'Platform Docker Image'
    required: false
  storefrontImage:
    description: 'Storefront Docker Image'
    required: false
  validateSwagger:
    description: 'Enable or disable swagger validation'
    required: false
    default: 'true'
  installCustomModule:
    description: 'Enable or disable custom module ver. installation'
    required: false
    default: 'false'
  customModuleId:
    description: 'Custom Module id'
    required: false
    default: ''
  customModuleUrl:
    description: 'Custom module Module url'
    required: false
    default: ''
  installModules:
    description: 'Enable or disable "Install Modules" step'
    required: false
    default: 'true'
  installSampleData:
    description: 'Enable or disable "Install Sample Data" step'
    required: true
    default: 'true'
  envDir:
    description: 'Directory with environment files'
    required: true
    default: '.'


runs:
  using: "composite"
  steps:

    - name: Install Commerce Bundle Modules
      if: ${{ inputs.installModules  == 'true' }}
      working-directory: ${{ github.action_path }}
      env: 
        INSTALL_FOLDER: 'modules'
      shell: pwsh
      run: |
        Write-Host "`e[33mInstall Modules step started."
        New-Item -Path "./" -Name "${{ env.INSTALL_FOLDER}}" -ItemType "directory"
        Push-Location ./${{ env.INSTALL_FOLDER}}
        vc-build install -skip InstallPlatform
        Pop-Location

    - name: Install Custom Module
      if: ${{ inputs.installCustomModule == 'true' }}
      env: 
        INSTALL_FOLDER: 'modules'
      working-directory: ${{ github.action_path }}
      shell: pwsh
      run: |
        Write-Host "`e[33mInstall Custom Module started."
        . "./scripts/install-custom-module.ps1"
        InstallCustomModule -InstallFolder ${{ env.INSTALL_FOLDER }} -CustomModuleId ${{ inputs.customModuleId }} -CustomModuleUrl ${{ inputs.customModuleUrl }}

    - name:  .env files
      env:
        ENV_DIR: ${{ inputs.envDir }}
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo -e '\033[33m.env files started.'
        mkdir -p ${{ inputs.envDir }}/.docker
        touch ${{ inputs.envDir }}/.docker/platform.env
        touch ${{ inputs.envDir }}/.docker/storefront.env 
        echo -e 'Platform environment variables:'
        cat ${{ inputs.envDir }}/.docker/platform.env
        echo -e 'Storefront environment variables:'
        cat ${{ inputs.envDir }}/.docker/storefront.env

    - name: Start containers
      env:
        PLATFORM_IMAGE: ${{ inputs.platformImage }}
        STOREFRONT_IMAGE: ${{ inputs.storefrontImage }}
        PLATFORM_DOCKER_TAG: ${{ inputs.platformDockerTag }}
        STOREFRONT_DOCKER_TAG: ${{ inputs.storefrontDockerTag }}
        ENV_DIR: ${{ inputs.envDir }}
      shell: pwsh
      working-directory: ${{ github.action_path }}
      run: |
        Write-Host "`e[33mStart Containers step started."
        $platformContainer = "virtocommerce_vc-platform-web_1"
        . "./scripts/inspect-docker-status.ps1"

        docker-compose --project-name virtocommerce up -d

        InspectContainerStatus -ContainerId $platformContainer
        
        Write-Host "`e[32mContainers started."

    - name: Check Installed Modules
      if: ${{ inputs.installModules == 'true' }}
      working-directory: ${{ github.action_path }}
      shell: pwsh
      run: |
        Write-Host "`e[33mCheck Installed Modules step started."
        $platformContainer = "virtocommerce_vc-platform-web_1"
        scripts/check-installed-modules.ps1 -ApiUrl http://localhost:8090 -ContainerId $platformContainer
        Write-Host "`e[32mInstalled Modules checked."

    - name: Install Sample Data
      if: ${{ inputs.installSampleData == 'true' }}
      working-directory: ${{ github.action_path }}
      shell: pwsh
      run: |
        Write-Host "`e[33mInstall Sample Data step started."
        scripts/setup-sampledata.ps1 -ApiUrl http://localhost:8090 -Verbose -Debug

    - name: Swagger Schema Validation
      if: ${{ inputs.validateSwagger == 'true' }}
      shell: pwsh
      run: |
        $waitForSwaggerSec = 30
        Write-Host "`e[33mSwagger Schema Validation step started."
        $platformContainer = "virtocommerce_vc-platform-web_1"
        . "${{ github.action_path }}/scripts/watch-url-up.ps1"
        $platformIsUp = (Watch-Url-Up -ApiUrl http://localhost:8090 -TimeoutMinutes 15 -RetrySeconds 15 -WaitSeconds 0 -ContainerId $platformContainer)
        if ($platformIsUp) {
          docker pull swaggerapi/swagger-validator-v2
          docker run -d -p 85:8080 swaggerapi/swagger-validator-v2
          Write-Host "`e[33mWait before swagger-validator-v2 start for $waitForSwaggerSec seconds."
          Start-Sleep -Seconds $waitForSwaggerSec
          ${{ github.action_path }}/scripts/get-swagger.ps1 -ApiUrl http://localhost:8090 -OutFile ${{ github.action_path }}/swaggerSchema.json -Verbose -Debug
          Get-ChildItem
          Get-ChildItem ${{ github.action_path }}
          Get-Content -Path ${{ github.action_path }}/swaggerSchema.json -TotalCount 10
          vc-build ValidateSwaggerSchema -SwaggerSchemaPath ${{ github.action_path }}/swaggerSchema.json -SwaggerValidatorUri http://localhost:85/validator/debug
        }
        Write-Host "`e[32mSwagger Schema validated."
