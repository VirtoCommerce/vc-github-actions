name: 'Update docs.virtocommerce.org'
description: 'Makes and updates documentation for docs.virtocommerce.org'
inputs:
  azureSubscriptionId:
    description: "Azure Subscription ID"
    required: true
  azureResourceGroupName:
    description: "Azure Resource Group Name"
    required: true
  azureWebAppName:
    description: "Azure WebApp Name"
    required: true
  azureTenantId:
    description: ""
    required: true
  azureApiKey:
    description: ""
    required: true
  azureAppId:
    description: ""
    required: true
  dockerRegistry:
    description: "Docker Registry"
    required: true
  dockerUsr:
    description: "Docker User"
    required: true
  dockerPwd:
    description: "Docker Passsword"
    required: true
  

runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        # Install jq for JSON processing
        if ! command -v jq &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y jq wget
        fi
        # Install PyYAML for navigation fixing script
        pip install PyYAML
    
    - name: Build docs with mike versioning
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        # Clone repository with full history for mike
        git clone https://github.com/VirtoCommerce/vc-docs --branch "feature/structure_redesign"
        cd vc-docs
        
        # Configure git for mike pushes
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # Fetch gh-pages branch for mike to work with
        git fetch origin gh-pages:gh-pages || echo "No gh-pages branch yet, mike will create it"
        
        # Make scripts executable
        chmod +x *.sh
        
        # Check deployment configuration
        if ! ./check-version-update.sh; then
          echo "‚è≠Ô∏è Skipping deployment - deployment disabled in config"
          exit 0
        fi
        
        # Read version info
        VERSION=$(jq -r '.version' version-config.json)
        ALIAS=$(jq -r '.alias' version-config.json)
        SET_DEFAULT=$(jq -r '.setDefault' version-config.json)
        
        # Fix navigation issues by removing None/null entries
        echo "üîß Fixing navigation issues..."
        
        python3 << 'PYTHON_SCRIPT'
import yaml
import os

def clean_nav(obj):
    """Remove None values and empty entries from navigation"""
    if isinstance(obj, dict):
        cleaned = {}
        for key, value in obj.items():
            cleaned_value = clean_nav(value)
            if cleaned_value is not None:
                cleaned[key] = cleaned_value
        return cleaned if cleaned else None
    elif isinstance(obj, list):
        cleaned = []
        for item in obj:
            cleaned_item = clean_nav(item)
            if cleaned_item is not None:
                cleaned.append(cleaned_item)
        return cleaned if cleaned else None
    else:
        # Return None for null/None values, keep everything else
        return obj if obj is not None else None

try:
    with open('mkdocs.yml', 'r') as f:
        config = yaml.safe_load(f)
    
    # Clean navigation
    if 'nav' in config and config['nav']:
        print("Cleaning navigation...")
        cleaned_nav = clean_nav(config['nav'])
        if cleaned_nav:
            config['nav'] = cleaned_nav
        else:
            # If nav becomes empty, remove it entirely to use auto-discovery
            del config['nav']
            print("Navigation was empty, using auto-discovery")
        
        # Backup original
        with open('mkdocs.yml.bak', 'w') as f:
            yaml.dump(config, f)
        
        # Write cleaned config
        with open('mkdocs.yml', 'w') as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
        
        print("Navigation cleaned successfully")
    else:
        print("No navigation found in mkdocs.yml")
        
except Exception as e:
    print(f"Warning: Could not clean navigation: {e}")
    # Restore backup if it exists
    if os.path.exists('mkdocs.yml.bak'):
        os.rename('mkdocs.yml.bak', 'mkdocs.yml')
PYTHON_SCRIPT
        
        echo "üì¶ Preparing for Mike deployment..."
        
        # Check if this version already exists in mike
        if git ls-remote --heads origin | grep -q "refs/heads/gh-pages"; then
          git fetch origin gh-pages:refs/remotes/origin/gh-pages
          if mike list 2>/dev/null | grep -q "^$VERSION"; then
            echo "üîÑ Updating existing version $VERSION documentation..."
            UPDATE_EXISTING=true
          else
            echo "üì¶ Deploying NEW version $VERSION..."
            UPDATE_EXISTING=false
          fi
        else
          echo "üì¶ First deployment - creating gh-pages branch..."
          UPDATE_EXISTING=false
        fi
        
        # Deploy with mike
        MIKE_DEPLOYED=false
        
        # Try deployment with cleaned mkdocs.yml
        if [ "$ALIAS" != "null" ] && [ "$ALIAS" != "" ]; then
          if mike deploy --push --update-aliases "$VERSION" "$ALIAS" 2>&1; then
            MIKE_DEPLOYED=true
            echo "‚úÖ Successfully deployed with mike"
          else
            echo "‚ö†Ô∏è Mike deploy failed, trying without strict mode..."
            # Try with a minimal config
            cat > mkdocs-minimal.yml << 'EOF'
site_name: VirtoCommerce Documentation
site_url: https://docs.virtocommerce.org
repo_url: https://github.com/VirtoCommerce/vc-docs
repo_name: VirtoCommerce/vc-docs
theme:
  name: material
  features:
    - navigation.tabs
    - navigation.sections
    - navigation.expand
plugins:
  - search
  - mike:
      version_selector: true
      css_dir: css
      javascript_dir: js
      canonical_version: latest
EOF
            if mike deploy --config-file mkdocs-minimal.yml --push --update-aliases "$VERSION" "$ALIAS" 2>&1; then
              MIKE_DEPLOYED=true
              echo "‚úÖ Deployed with minimal config"
            fi
          fi
        else
          if mike deploy --push "$VERSION" 2>&1; then
            MIKE_DEPLOYED=true
            echo "‚úÖ Successfully deployed with mike"
          fi
        fi
        
        if [ "$MIKE_DEPLOYED" = false ]; then
          echo "‚ùå Mike deployment failed. Check the logs above for details."
          echo "Continuing with static build for Docker..."
        fi
        
        # Set as default if requested for new versions
        if [ "$UPDATE_EXISTING" = "false" ] && [ "$SET_DEFAULT" = "true" ]; then
          echo "üéØ Setting $VERSION as default version..."
          mike set-default --push "$VERSION"
        fi
        
        # Build site for current version using mkdocs
        echo "üì¶ Building static site for Docker deployment..."
        
        # Restore original mkdocs.yml if we have a backup
        if [ -f "mkdocs.yml.bak" ]; then
          echo "Restoring original mkdocs.yml for static build..."
          cp mkdocs.yml.bak mkdocs.yml
        fi
        
        # Try to build each documentation section (continue on errors)
        echo "Building main docs..."
        mkdocs build -d ./site 2>/dev/null || {
          echo "‚ö†Ô∏è Main docs build failed, using fallback..."
          mkdir -p site
          echo "<h1>Documentation</h1>" > site/index.html
        }
        
        # Build subsections if they exist
        for config_path in \
          "storefront/mkdocs.yml:../site/storefront" \
          "storefront/user-guide/mkdocs.yml:../../site/storefront/user-guide" \
          "storefront/developer-guide/mkdocs.yml:../../site/storefront/developer-guide" \
          "platform/mkdocs.yml:../site/platform" \
          "platform/user-guide/mkdocs.yml:../../site/platform/user-guide" \
          "platform/developer-guide/mkdocs.yml:../../site/platform/developer-guide" \
          "platform/deployment-on-cloud/mkdocs.yml:../../site/platform/deployment-on-cloud" \
          "marketplace/mkdocs.yml:../site/marketplace" \
          "marketplace/user-guide/mkdocs.yml:../../site/marketplace/user-guide" \
          "marketplace/developer-guide/mkdocs.yml:../../site/marketplace/developer-guide"
        do
          CONFIG=$(echo $config_path | cut -d: -f1)
          OUTPUT=$(echo $config_path | cut -d: -f2)
          
          if [ -f "$CONFIG" ]; then
            echo "Building $CONFIG..."
            mkdocs build -f "$CONFIG" -d "$OUTPUT" 2>/dev/null || echo "‚ö†Ô∏è Skipped $CONFIG (build error)"
          fi
        done
        
        # Ensure site directory exists
        mkdir -p site
        
        echo "‚úÖ Static site build completed (with possible warnings)"

    - name: Docker
      shell: pwsh
      working-directory: ${{ github.workspace }}
      run: |
        dotnet tool install --global VirtoCommerce.GlobalTool
        Copy-Item -Path ${{ github.action_path }}/docker/* -Destination ./ -Recurse -Force
        vc-build BuildAndPush -DockerUsername ${{ inputs.dockerUsr }} -DockerPassword ${{ inputs.dockerPwd }} -DockerfilePath ./Dockerfile -DockerImageName ${{ inputs.dockerRegistry }}/vcpt/docs -DockerImageTag $env:GITHUB_RUN_NUMBER -DockerRegistryUrl ${{ inputs.dockerRegistry }}
        
#     - name: Upload docs
#       shell: pwsh
#       env: 
#         AzureSubscriptionIDProd: ${{ inputs.azureSubscriptionId }}
#         AzureResourceGroupNameProd: ${{ inputs.azureResourceGroupName }}
#         AzureWebAppNameProd: ${{ inputs.azureWebAppName }}
#         ArtifactPath: ${{ github.workspace }}/site.zip
#         AzureAPIKey: ${{ inputs.azureApiKey }}
#         AzureTenantID: ${{ inputs.azureTenantId }}
#         AzureAppID: ${{ inputs.azureAppId }}
#       run: |
#         pwsh -file ${{ github.action_path }}/scripts/DocsUpdate.ps1
