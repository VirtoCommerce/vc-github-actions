name: 'Update docs.virtocommerce.org'
description: 'Makes and updates documentation for docs.virtocommerce.org'
inputs:
  azureSubscriptionId:
    description: "Azure Subscription ID"
    required: true
  azureResourceGroupName:
    description: "Azure Resource Group Name"
    required: true
  azureWebAppName:
    description: "Azure WebApp Name"
    required: true
  azureTenantId:
    description: ""
    required: true
  azureApiKey:
    description: ""
    required: true
  azureAppId:
    description: ""
    required: true
  dockerRegistry:
    description: "Docker Registry"
    required: true
  dockerUsr:
    description: "Docker User"
    required: true
  dockerPwd:
    description: "Docker Passsword"
    required: true
  

runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        # Install jq for JSON processing
        if ! command -v jq &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y jq
        fi
    
    - name: Build docs with mike versioning
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        # Clone repository with full history for mike
        git clone https://github.com/VirtoCommerce/vc-docs --branch "feature/structure_redesign"
        cd vc-docs
        
        # Configure git for mike pushes
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # Fetch gh-pages branch for mike to work with
        git fetch origin gh-pages:gh-pages || echo "No gh-pages branch yet, mike will create it"
        
        # Make scripts executable
        chmod +x *.sh
        
        # Check deployment configuration
        if ! ./check-version-update.sh; then
          echo "‚è≠Ô∏è Skipping deployment - deployment disabled in config"
          exit 0
        fi
        
        # Read version info
        VERSION=$(jq -r '.version' version-config.json)
        ALIAS=$(jq -r '.alias' version-config.json)
        SET_DEFAULT=$(jq -r '.setDefault' version-config.json)
        
        # Skip navigation cleaning for now - it has compatibility issues
        echo "üì¶ Preparing for deployment..."
        
        # Ensure required directories exist
        mkdir -p overrides
        
        # Copy home.html template if it exists
        if [ -f "overrides/home.html" ]; then
          echo "‚úÖ Found custom home.html template"
        else
          echo "‚ö†Ô∏è No home.html template found, pages may use fallback"
        fi
        
        # Check if this version already exists in mike
        if git ls-remote --heads origin | grep -q "refs/heads/gh-pages"; then
          git fetch origin gh-pages:refs/remotes/origin/gh-pages
          if mike list 2>/dev/null | grep -q "^$VERSION"; then
            echo "üîÑ Updating existing version $VERSION documentation..."
            UPDATE_EXISTING=true
          else
            echo "üì¶ Deploying NEW version $VERSION..."
            UPDATE_EXISTING=false
          fi
        else
          echo "üì¶ First deployment - creating gh-pages branch..."
          UPDATE_EXISTING=false
        fi
        
        # Build documentation first using existing build script
        echo "üî® Building documentation with PowerShell script..."
        pwsh ./build.ps1 || {
          echo "‚ö†Ô∏è PowerShell build had warnings, continuing..."
        }
        
        # Now deploy the built site with mike
        MIKE_DEPLOYED=false
        
        echo "üì¶ Deploying version $VERSION with Mike..."
        
        # Create a temporary mkdocs.yml without nav for mike
        cat > mkdocs-mike.yml << 'MIKECONFIG'
        site_name: VirtoCommerce Documentation
        site_url: https://docs.virtocommerce.org
        site_dir: site
        
        theme:
          name: material
          custom_dir: overrides
          features:
            - navigation.tabs
            - navigation.sections
        
        plugins:
          - search
          - mike:
              version_selector: true
              css_dir: css
              javascript_dir: js
              canonical_version: latest
        
        extra:
          version:
            provider: mike
        MIKECONFIG
        
        # Try to deploy with mike using the built site
        if [ "$ALIAS" != "null" ] && [ "$ALIAS" != "" ]; then
          if mike deploy --config-file mkdocs-mike.yml --push --update-aliases "$VERSION" "$ALIAS" 2>&1; then
            MIKE_DEPLOYED=true
            echo "‚úÖ Successfully deployed version $VERSION with alias $ALIAS"
          else
            echo "‚ö†Ô∏è Mike deploy failed. Trying alternative approach..."
            # Alternative: manually push to gh-pages
            git checkout -B gh-pages origin/gh-pages 2>/dev/null || git checkout --orphan gh-pages
            cp -r site/* .
            git add -A
            git commit -m "Deploy version $VERSION" || echo "No changes to commit"
            git push origin gh-pages --force
            git checkout -
            MIKE_DEPLOYED=true
          fi
        else
          mike deploy --config-file mkdocs-mike.yml --push "$VERSION" 2>&1 || echo "Mike deploy warning"
          MIKE_DEPLOYED=true
        fi
        
        # Set as default if requested
        if [ "$UPDATE_EXISTING" = "false" ] && [ "$SET_DEFAULT" = "true" ] && [ "$MIKE_DEPLOYED" = "true" ]; then
          echo "üéØ Setting $VERSION as default version..."
          mike set-default --config-file mkdocs-mike.yml --push "$VERSION" 2>/dev/null || echo "Could not set default version"
        fi
        
        rm -f mkdocs-mike.yml
        
        # Site is already built by build.ps1, just verify it exists
        echo "üì¶ Verifying static site for Docker deployment..."
        
        if [ -d "site" ] && [ -f "site/index.html" ]; then
          echo "‚úÖ Static site is ready for Docker deployment"
          ls -la site/ | head -10
        else
          echo "‚ö†Ô∏è Site directory not found, rebuilding..."
          # Fallback: try to rebuild with PowerShell
          pwsh ./build.ps1 || echo "Build completed with warnings"
        fi
        
        # Ensure site directory exists for Docker
        mkdir -p site
        
        echo "‚úÖ Site preparation completed"

    - name: Docker
      shell: pwsh
      working-directory: ${{ github.workspace }}
      run: |
        dotnet tool install --global VirtoCommerce.GlobalTool
        Copy-Item -Path ${{ github.action_path }}/docker/* -Destination ./ -Recurse -Force
        vc-build BuildAndPush -DockerUsername ${{ inputs.dockerUsr }} -DockerPassword ${{ inputs.dockerPwd }} -DockerfilePath ./Dockerfile -DockerImageName ${{ inputs.dockerRegistry }}/vcpt/docs -DockerImageTag $env:GITHUB_RUN_NUMBER -DockerRegistryUrl ${{ inputs.dockerRegistry }}
        
#     - name: Upload docs
#       shell: pwsh
#       env: 
#         AzureSubscriptionIDProd: ${{ inputs.azureSubscriptionId }}
#         AzureResourceGroupNameProd: ${{ inputs.azureResourceGroupName }}
#         AzureWebAppNameProd: ${{ inputs.azureWebAppName }}
#         ArtifactPath: ${{ github.workspace }}/site.zip
#         AzureAPIKey: ${{ inputs.azureApiKey }}
#         AzureTenantID: ${{ inputs.azureTenantId }}
#         AzureAppID: ${{ inputs.azureAppId }}
#       run: |
#         pwsh -file ${{ github.action_path }}/scripts/DocsUpdate.ps1
